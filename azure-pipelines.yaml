trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - develop
  paths:
    exclude:
      - README.md
      - LICENSE
pr: none

variables:
  imageName: 'focal-freedom-236620/router'
  imageTag: 'dev'
  ref: $(Build.SourceBranch)
  buildTag: $(Build.BuildId)
  isRelease: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]

stages:
- stage: Build
  jobs:
  - job: RouterDockerImages

    timeoutInMinutes: 240
  
    strategy:
      matrix:
        amd64:
          poolImageName: 'Azure Pipelines'
          imageTagSuffix: 'amd64'
        arm32v7:
          poolImageName: 'RPi'
          imageTagSuffix: 'arm32v7'
        arm64v8:
          poolImageName: 'build-farm-coral'
          imageTagSuffix: 'arm64v8'

    pool: $(poolImageName)

    steps:
      - script: |
          if [[ $(ref) == refs/tags* ]]; then
            TAG=$(echo $(ref) | sed "s|refs/tags/v||g")
            echo "##vso[task.setvariable variable=imageTag]$TAG"
          else
            LATESTTAG=$(git tag | tail -1)
            LATESTVERS=${LATESTTAG#?}
            if [ -z "$LATESTVERS" ]; then LATESTVERS=0.0.0; fi
            echo "##vso[task.setvariable variable=imageTag]$LATESTVERS-b$(buildTag)"
          fi
        displayName: 'Set image tag'

      - template: ./pipeline.yaml
        parameters:
          imageName: $(imageName)
          imageTag: $(imageTag)-$(imageTagSuffix)
          dockerFile: 'Dockerfile'

- stage: Publish
  jobs:
  - job: Dev_ioFogRouterDockerManifest

    timeoutInMinutes: 240
  
    pool: 'Azure Pipelines'

    variables:
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - script: |
          if [[ $(ref) == refs/tags* ]]; then
            TAG=$(echo $(ref) | sed "s|refs/tags/v||g")
            echo "##vso[task.setvariable variable=imageTag]$TAG"
          else
            LATESTTAG=$(git tag | tail -1)
            LATESTVERS=${LATESTTAG#?}
            if [ -z "$LATESTVERS" ]; then LATESTVERS=0.0.0; fi
            echo "##vso[task.setvariable variable=imageTag]$LATESTVERS-b$(buildTag)"
          fi
        displayName: 'Set image tag'

      - script: |
          echo $(imageTag)
        displayName: 'Check image tag'
        
      - task: Docker@2
        displayName: Login to Dockerhub
        inputs:
          command: login
          containerRegistry: 'Edgeworx GCP'

      - script: |
          docker pull gcr.io/$(imageName):$(imageTag)-amd64
          docker pull gcr.io/$(imageName):$(imageTag)-arm32v7
          docker pull gcr.io/$(imageName):$(imageTag)-arm64v8
        displayName: 'Pull amd64, arm32v7, and arm64v8 docker images'

      - script: |
          docker manifest create \
            gcr.io/$(imageName):$(imageTag) \
            --amend gcr.io/$(imageName):$(imageTag)-amd64 \
            --amend gcr.io/$(imageName):$(imageTag)-arm32v7 \
            --amend gcr.io/$(imageName):$(imageTag)-arm64v8
        displayName: 'Create image manifest'

      - script: |
          docker manifest push gcr.io/$(imageName):$(imageTag)
        displayName: 'Push image manifest'

  - job: Prod_ioFogRouterDockerManifest
    condition: eq(variables['isRelease'], true)

    timeoutInMinutes: 240
  
    pool: 'Azure Pipelines'

    variables:
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - script: |
          if [[ $(ref) == refs/tags* ]]; then
            TAG=$(echo $(ref) | sed "s|refs/tags/v||g")
            echo "##vso[task.setvariable variable=imageTag]$TAG"
          else
            LATESTTAG=$(git tag | tail -1)
            LATESTVERS=${LATESTTAG#?}
            if [ -z "$LATESTVERS" ]; then LATESTVERS=0.0.0; fi
            echo "##vso[task.setvariable variable=imageTag]$LATESTVERS-b$(buildTag)"
          fi
        displayName: 'Set image tag'

      - script: |
          echo $(imageTag)
        displayName: 'Check image tag'
        
      - task: Docker@2
        displayName: Login to Dockerhub
        inputs:
          command: login
          containerRegistry: 'Edgeworx GCP'

      - script: |
          docker pull gcr.io/$(imageName):$(imageTag)-amd64
          docker pull gcr.io/$(imageName):$(imageTag)-arm32v7
          docker pull gcr.io/$(imageName):$(imageTag)-arm64v8
        displayName: 'Pull amd64, arm32v7, and arm64v8 docker images'

      - script: |
          docker manifest create \
            gcr.io/$(imageName):$(imageTag) \
            --amend gcr.io/$(imageName):$(imageTag)-amd64 \
            --amend gcr.io/$(imageName):$(imageTag)-arm32v7 \
            --amend gcr.io/$(imageName):$(imageTag)-arm64v8
        displayName: 'Create image manifest'

      - script: |
          docker manifest push gcr.io/$(imageName):$(imageTag)
        displayName: 'Push image manifest'
